describe("url", function()
	local t, is, url
	setup(function()
    t = require "t"
    is = t.is
    url = t.net.url
	end)
  it("meta", function()
    assert.truthy(is)
    assert.truthy(is.callable(url))
    assert.truthy(is.callable(url.short))
    assert.truthy(is.callable(url.long))
  end)
  it("url parse and fields", function()
    assert.equal("foo.com", url.short('https://www.foo.com'))
    assert.equal("https://foo.com", url.long('https://foo.com'))

    local u = url("https://www.FOO.com///foo/../foo/./bar")
    assert.equal("foo.com", u.domain)
    assert.equal("https", u.scheme)
    assert.equal("https://foo.com/foo/bar", tostring(u))

    u = url("https://FOO.com///foo/../foo/./bar")
--    assert.equal("com", u.tld)
    assert.equal("foo.com", u.domain)
    assert.equal("https", u.scheme)

    u = url("https://www.FOO.com///foo/../foo/./bar")
    assert.equal('https://foo.com/foo/bar', tostring(u))
    assert.equal('foo.com', u.host)

    assert.equal(tostring(url('www.foo.com/foo/bar')), tostring(url('https://www.FOO.com///foo/../foo/./bar')))
    assert.equal(url('www.foo.com/foo/bar'), url('https://www.FOO.com///foo/../foo/./bar'))
  end)
  it("checks url domain/host", function()
    assert.equal("no_more_test.anywat.io", url("no_more_test.anywat.io").authority)

    assert.equal("axapta.microsoft.com", url("axapta.microsoft.com").host)
    assert.equal("microsoft.com", url("microsoft.com").host)
    assert.equal("outlook.com", url("outlook.com").host)
    assert.equal("microsoft.com.ru", url("microsoft.com.ru").host)
    assert.equal("no_more_test.anywat.io", url("no_more_test.anywat.io").host)
    assert.equal("axapta.microsoft.com", url("https://axapta.microsoft.com").host)
    assert.equal("microsoft.com", url("http://microsoft.com").host)
    assert.equal("outlook.com", url("www.outlook.com").host)
    assert.equal("microsoft.com.ru", url("microsoft.com.ru").host)
    assert.equal("no_more_test.anywat.io", url("www.no_more_test.anywat.io").host)

    assert.equal("anywat.io", url("no_more_test.anywat.io").domain)
    assert.equal("microsoft.com", url("axapta.microsoft.com").domain)
    assert.equal("microsoft.com", url("microsoft.com").domain)
    assert.equal("outlook.com", url("outlook.com").domain)
    assert.equal("microsoft.com.ru", url("microsoft.com.ru").domain)
    assert.equal("anywat.io", url("no_more_test.anywat.io").domain)
    assert.equal("microsoft.com", url("https://axapta.microsoft.com").domain)
    assert.equal("microsoft.com", url("http://microsoft.com").domain)
    assert.equal("outlook.com", url("www.outlook.com").domain)
    assert.equal("microsoft.com.ru", url("microsoft.com.ru").domain)
    assert.equal("anywat.io", url("www.no_more_test.anywat.io").domain)
  end)
  it("url normalization", function()
    assert.equal("https://site.com/c", tostring(url("site.com/c")))
    assert.equal("https://site.com/c", tostring(url("www.site.com/c")))
    assert.equal("https://site.com/c", tostring(url("http://site.com/c")))
    assert.equal("https://site.com/c", tostring(url("https://site.com/c")))
    assert.equal("https://site.com/c", tostring(url("http://www.site.com/c")))
    assert.equal("https://site.com/c", tostring(url("https://www.site.com/c")))
  end)
  it("negative", function()
--    assert.is_nil(url('8.8.8.8'))
    assert.is_nil(url(''))
    assert.is_nil(url('.'))
--    assert.is_nil(url('.local'))
--    assert.is_nil(url('local'))
    assert.is_nil(url({}))
    assert.is_nil(url({''}))
    assert.is_nil(url({'type'}))
    assert.is_nil(url(0))
    assert.is_nil(url(''))
    assert.is_nil(url(false))
    assert.is_nil(url(true))
    assert.is_nil(url(string.lower))
  end)
  it("nil", function()
    assert.is_nil(url(nil))
    assert.is_nil(url())
  end)
end)